(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{169:function(t,a,n){"use strict";n.r(a);var e=n(0),s=Object(e.a)({},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("The tracing system allows developers to visualize call flows in their infrastructure.")]),t._v(" "),n("p",[t._v("We use "),n("a",{attrs:{href:"http://opentracing.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenTracing"),n("OutboundLink")],1),t._v(". It is an open standard designed for distributed tracing.")]),t._v(" "),n("p",[t._v("Traefik supports three tracing backends: Jaeger, Zipkin and DataDog.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),n("p",[t._v("!!! warning\nTraefik is only able to send data over compact thrift protocol to the "),n("a",{attrs:{href:"https://www.jaegertracing.io/docs/deployment/#agent",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jaeger agent"),n("OutboundLink")],1),t._v(".")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6)])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"tracing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tracing","aria-hidden":"true"}},[this._v("#")]),this._v(" Tracing")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"jaeger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jaeger","aria-hidden":"true"}},[this._v("#")]),this._v(" Jaeger")])},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"language-ini extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ini"}},[n("code",[t._v("# Tracing definition\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("[tracing]")]),t._v('\n  # Backend name used to send tracing data\n  #\n  # Default: "jaeger"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  backend")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "jaeger"')]),t._v('\n\n  # Service name used in Jaeger backend\n  #\n  # Default: "traefik"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  serviceName")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "traefik"')]),t._v("\n    \n  # Span name limit allows for name truncation in case of very long Frontend/Backend names\n  # This can prevent certain tracing providers to drop traces that exceed their length limits\n  #\n  # Default: 0 - no truncation will occur\n  # \n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  spanNameLimit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 0")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("  [tracing.jaeger]")]),t._v('\n    # Sampling Server URL is the address of jaeger-agent\'s HTTP sampling server\n    #\n    # Default: "http://localhost:5778/sampling"\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    samplingServerURL")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "http://localhost:5778/sampling"')]),t._v('\n\n    # Sampling Type specifies the type of the sampler: const, probabilistic, rateLimiting\n    #\n    # Default: "const"\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    samplingType")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "const"')]),t._v('\n\n    # Sampling Param is a value passed to the sampler.\n    # Valid values for Param field are:\n    #   - for "const" sampler, 0 or 1 for always false/true respectively\n    #   - for "probabilistic" sampler, a probability between 0 and 1\n    #   - for "rateLimiting" sampler, the number of spans per second\n    #\n    # Default: 1.0\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    samplingParam")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 1.0")]),t._v('\n\n    # Local Agent Host Port instructs reporter to send spans to jaeger-agent at this address\n    #\n    # Default: "127.0.0.1:6831"\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    localAgentHostPort")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "127.0.0.1:6831"')]),t._v("\n   \n    # Generate 128-bit trace IDs, compatible with OpenCensus\n    #\n    # Default: false\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    gen128Bit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" true")]),t._v('\n   \n    # Set the propagation header type. This can be either:\n    #   - "jaeger", jaeger\'s default trace header.\n    #   - "b3", compatible with OpenZipkin\n    #\n    # Default: "jaeger"\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    propagation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "jaeger"')]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"zipkin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zipkin","aria-hidden":"true"}},[this._v("#")]),this._v(" Zipkin")])},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"language-ini extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ini"}},[n("code",[t._v("# Tracing definition\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("[tracing]")]),t._v('\n  # Backend name used to send tracing data\n  #\n  # Default: "jaeger"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  backend")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "zipkin"')]),t._v('\n\n  # Service name used in Zipkin backend\n  #\n  # Default: "traefik"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  serviceName")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "traefik"')]),t._v("\n    \n  # Span name limit allows for name truncation in case of very long Frontend/Backend names\n  # This can prevent certain tracing providers to drop traces that exceed their length limits\n  #\n  # Default: 0 - no truncation will occur\n  # \n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  spanNameLimit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 150")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("  [tracing.zipkin]")]),t._v('\n    # Zipkin HTTP endpoint used to send data\n    #\n    # Default: "http://localhost:9411/api/v1/spans"\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    httpEndpoint")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "http://localhost:9411/api/v1/spans"')]),t._v("\n\n    # Enable Zipkin debug\n    #\n    # Default: false\n    #\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    debug")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" false")]),t._v("\n\n    # Use Zipkin SameSpan RPC style traces\n    #\n    # Default: false\n    #\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    sameSpan")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" false")]),t._v("\n\n    # Use Zipkin 128 bit root span IDs\n    #\n    # Default: true\n    #\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    id128Bit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" true")]),t._v("\n\n    # The rate between 0.0 and 1.0 of requests to trace.\n    #\n    # Default: 1.0\n    #\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    sampleRate")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 0.2")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"datadog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datadog","aria-hidden":"true"}},[this._v("#")]),this._v(" DataDog")])},function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"language-ini extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ini"}},[n("code",[t._v("# Tracing definition\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("[tracing]")]),t._v('\n  # Backend name used to send tracing data\n  #\n  # Default: "jaeger"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  backend")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "datadog"')]),t._v('\n\n  # Service name used in DataDog backend\n  #\n  # Default: "traefik"\n  #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  serviceName")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "traefik"')]),t._v("\n  \n  # Span name limit allows for name truncation in case of very long Frontend/Backend names\n  # This can prevent certain tracing providers to drop traces that exceed their length limits\n  #\n  # Default: 0 - no truncation will occur\n  # \n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("  spanNameLimit")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 100")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token selector"}},[t._v("  [tracing.datadog]")]),t._v('\n    # Local Agent Host Port instructs reporter to send spans to datadog-tracing-agent at this address\n    #\n    # Default: "127.0.0.1:8126"\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    localAgentHostPort")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' "127.0.0.1:8126"')]),t._v("\n\n    # Enable DataDog debug\n    #\n    # Default: false\n    #\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    debug")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" false")]),t._v('\n\n    # Apply shared tag in a form of Key:Value to all the traces\n    #\n    # Default: ""\n    #\n'),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("    globalTag")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(' ""')]),t._v("\n\n")])])])}],!1,null,null,null);a.default=s.exports}}]);